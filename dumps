function millerRabin(n) {
  let d = n - 1;
  console.log(`d: ${d}`);

  let base = 2;
  let exponent = 1;
  let remainder;

  while ((d % (2 ** exponent)) === 0) {
    exponent++;
    console.log(`Exponent: ${exponent}`);
    console.log(`d / (2 ^ ${exponent - 1}): ${d / (2 ** (exponent - 1))}`);
  }

  let x = base ** (d / (2 ** (exponent - 1)));
  console.log(`x: ${x}`);

  if (x === 1 || x === n - 1) {
    console.log("Probably prime");
  } else {
    let isPrime = false;
    for (let i = 1; i < exponent - 1; i++) {
      x = x ** 2;
      console.log(`x: ${x}`);
      if (x === n - 1) {
        isPrime = true;
        break;
      }
    }
    console.log(isPrime ? "Probably prime" : "Composite");
  }
}

millerRabin(50);








Below is my ealier prompt with my initail code

how to i make this code console.log what is in the while statement and also why is not working: function Miller_Rabin ( ChoosenNumber) {


    let DoChoosen = ChoosenNumber - 1
    
    console.log(DoChoosen)
    
    // Am using the base as two because its the default while computing Miller-Rabin primality
    
    let TheBase = 2;
    
    // The exponent is first set to one because its the starting point
    
    let TheExponent = 1
    
    // let TheBaseRemainder
    
    let RaiseToPower = Math.pow( TheBase , TheExponent);
    
    let CheckIfRemainder = DoChoosen % RaiseToPower;
    
    let NumberOfUsedBase = 0
    
    
    
    while( CheckIfRemainder == 0){
    
    
    console.log( NumberOfUsedBase++)
    
    console.log( DoChoosen / RaiseToPower)
    
    console.log(TheExponent++)
    
    
    CheckIfRemainder = DoChoosen % RaiseToPower
    
    
    }
    
    
    
    }
    
    
    Miller_Rabin ( 50);

